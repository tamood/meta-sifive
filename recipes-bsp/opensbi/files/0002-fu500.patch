diff --git a/platform/sifive/fu500/config.mk b/platform/sifive/fu500/config.mk
new file mode 100644
index 0000000..776b405
--- /dev/null
+++ b/platform/sifive/fu500/config.mk
@@ -0,0 +1,39 @@
+#
+# SPDX-License-Identifier: BSD-2-Clause
+#
+# Copyright (c) 2019 Western Digital Corporation or its affiliates.
+#
+# Authors:
+#   Atish Patra <atish.patra@wdc.com>
+#
+
+# Compiler flags
+platform-cppflags-y =
+platform-cflags-y =
+platform-asflags-y =
+platform-ldflags-y =
+
+# Command for platform specific "make run"
+platform-runcmd = qemu-system-riscv$(PLATFORM_RISCV_XLEN) -M sifive_u -m 256M \
+  -nographic -kernel $(build_dir)/platform/sifive/fu500/firmware/fw_payload.elf
+
+# Blobs to build
+FW_TEXT_START=0x80000000
+FW_DYNAMIC=y
+FW_JUMP=y
+ifeq ($(PLATFORM_RISCV_XLEN), 32)
+  # This needs to be 4MB aligned for 32-bit system
+  FW_JUMP_ADDR=0x80400000
+else
+  # This needs to be 2MB aligned for 64-bit system
+  FW_JUMP_ADDR=0x80200000
+endif
+FW_JUMP_FDT_ADDR=0x88000000
+FW_PAYLOAD=y
+ifeq ($(PLATFORM_RISCV_XLEN), 32)
+  # This needs to be 4MB aligned for 32-bit system
+  FW_PAYLOAD_OFFSET=0x400000
+else
+  # This needs to be 2MB aligned for 64-bit system
+  FW_PAYLOAD_OFFSET=0x200000
+endif
diff --git a/platform/sifive/fu500/objects.mk b/platform/sifive/fu500/objects.mk
new file mode 100644
index 0000000..e0d0585
--- /dev/null
+++ b/platform/sifive/fu500/objects.mk
@@ -0,0 +1,10 @@
+#
+# SPDX-License-Identifier: BSD-2-Clause
+#
+# Copyright (c) 2019 Western Digital Corporation or its affiliates.
+#
+# Authors:
+#   Atish Patra <atish.patra@wdc.com>
+#
+
+platform-objs-y += platform.o
diff --git a/platform/sifive/fu500/platform.c b/platform/sifive/fu500/platform.c
new file mode 100644
index 0000000..4ddb163
--- /dev/null
+++ b/platform/sifive/fu500/platform.c
@@ -0,0 +1,181 @@
+/*
+ * SPDX-License-Identifier: BSD-2-Clause
+ *
+ * Copyright (c) 2019 Western Digital Corporation or its affiliates.
+ *
+ * Authors:
+ *   Atish Patra <atish.patra@wdc.com>
+ */
+
+#include <libfdt.h>
+#include <sbi/riscv_asm.h>
+#include <sbi/riscv_io.h>
+#include <sbi/riscv_encoding.h>
+#include <sbi/sbi_console.h>
+#include <sbi/sbi_const.h>
+#include <sbi/sbi_platform.h>
+#include <sbi_utils/fdt/fdt_fixup.h>
+#include <sbi_utils/irqchip/plic.h>
+#include <sbi_utils/serial/sifive-uart.h>
+#include <sbi_utils/sys/clint.h>
+
+/* clang-format off */
+
+#define U500_HART_COUNT			2
+
+#define U500_SYS_CLK				50000000
+
+#define U500_CLINT_ADDR			0x2000000
+
+#define U500_PLIC_ADDR				0xc000000
+#define U500_PLIC_NUM_SOURCES			111
+#define U500_PLIC_NUM_PRIORITIES		7
+
+#define U500_UART0_ADDR			0x10010000
+#define U500_UART1_ADDR			0x10011000
+#define U500_UART_BAUDRATE			115200
+
+/* Full tlb flush always */
+#define U500_TLB_RANGE_FLUSH_LIMIT		0
+
+/* clang-format on */
+
+static void u500_modify_dt(void *fdt)
+{
+	fdt_cpu_fixup(fdt);
+
+	fdt_fixups(fdt);
+}
+
+static int u500_final_init(bool cold_boot)
+{
+	void *fdt;
+
+	if (!cold_boot)
+		return 0;
+
+	fdt = sbi_scratch_thishart_arg1_ptr();
+	u500_modify_dt(fdt);
+
+	return 0;
+}
+
+static u32 u500_pmp_region_count(u32 hartid)
+{
+	return 1;
+}
+
+static int u500_pmp_region_info(u32 hartid, u32 index, ulong *prot,
+				 ulong *addr, ulong *log2size)
+{
+	int ret = 0;
+
+	switch (index) {
+	case 0:
+		*prot	  = PMP_R | PMP_W | PMP_X;
+		*addr	  = 0;
+		*log2size = __riscv_xlen;
+		break;
+	default:
+		ret = -1;
+		break;
+	};
+
+	return ret;
+}
+
+static int u500_console_init(void)
+{
+	return sifive_uart_init(U500_UART0_ADDR, U500_SYS_CLK,
+				U500_UART_BAUDRATE);
+}
+
+static int u500_irqchip_init(bool cold_boot)
+{
+	int rc;
+	u32 hartid = current_hartid();
+
+	if (cold_boot) {
+		rc = plic_cold_irqchip_init(U500_PLIC_ADDR,
+					    U500_PLIC_NUM_SOURCES,
+					    U500_HART_COUNT);
+		if (rc)
+			return rc;
+	}
+
+	return plic_warm_irqchip_init(hartid, (hartid) ? (2 * hartid - 1) : 0,
+				      (hartid) ? (2 * hartid) : -1);
+}
+
+static int u500_ipi_init(bool cold_boot)
+{
+	int rc;
+
+	if (cold_boot) {
+		rc = clint_cold_ipi_init(U500_CLINT_ADDR, U500_HART_COUNT);
+		if (rc)
+			return rc;
+	}
+
+	return clint_warm_ipi_init();
+}
+
+static u64 u500_get_tlbr_flush_limit(void)
+{
+	return U500_TLB_RANGE_FLUSH_LIMIT;
+}
+
+static int u500_timer_init(bool cold_boot)
+{
+	int rc;
+
+	if (cold_boot) {
+		rc = clint_cold_timer_init(U500_CLINT_ADDR,
+					   U500_HART_COUNT, TRUE);
+		if (rc)
+			return rc;
+	}
+
+	return clint_warm_timer_init();
+}
+
+static u32 u500_hart_index2id[U500_HART_COUNT - 1] = {
+	[0] = 1,
+};
+
+static int u500_system_down(u32 type)
+{
+	/* For now nothing to do. */
+	return 0;
+}
+
+const struct sbi_platform_operations platform_ops = {
+	.pmp_region_count	= u500_pmp_region_count,
+	.pmp_region_info	= u500_pmp_region_info,
+	.final_init		= u500_final_init,
+	.console_putc		= sifive_uart_putc,
+	.console_getc		= sifive_uart_getc,
+	.console_init		= u500_console_init,
+	.irqchip_init		= u500_irqchip_init,
+	.ipi_send		= clint_ipi_send,
+	.ipi_clear		= clint_ipi_clear,
+	.ipi_init		= u500_ipi_init,
+	.get_tlbr_flush_limit	= u500_get_tlbr_flush_limit,
+	.timer_value		= clint_timer_value,
+	.timer_event_stop	= clint_timer_event_stop,
+	.timer_event_start	= clint_timer_event_start,
+	.timer_init		= u500_timer_init,
+	.system_reboot		= u500_system_down,
+	.system_shutdown	= u500_system_down
+};
+
+const struct sbi_platform platform = {
+	.opensbi_version	= OPENSBI_VERSION,
+	.platform_version	= SBI_PLATFORM_VERSION(0x0, 0x01),
+	.name			= "SiFive Freedom U500",
+	.features		= SBI_PLATFORM_DEFAULT_FEATURES,
+	.hart_count		= (U500_HART_COUNT - 1),
+	.hart_index2id		= u500_hart_index2id,
+	.hart_stack_size	= SBI_PLATFORM_DEFAULT_HART_STACK_SIZE,
+	.platform_ops_addr	= (unsigned long)&platform_ops
+};
